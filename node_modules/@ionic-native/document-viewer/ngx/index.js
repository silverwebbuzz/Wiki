import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var DocumentViewer = /** @class */ (function (_super) {
    __extends(DocumentViewer, _super);
    function DocumentViewer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentViewer.prototype.getSupportInfo = function () { return cordova(this, "getSupportInfo", {}, arguments); };
    DocumentViewer.prototype.canViewDocument = function (url, contentType, options, onPossible, onMissingApp, onImpossible, onError) { return cordova(this, "canViewDocument", { "sync": true }, arguments); };
    DocumentViewer.prototype.viewDocument = function (url, contentType, options, onShow, onClose, onMissingApp, onError) { return cordova(this, "viewDocument", { "sync": true }, arguments); };
    DocumentViewer.pluginName = "Document Viewer";
    DocumentViewer.plugin = "cordova-plugin-document-viewer";
    DocumentViewer.pluginRef = "SitewaertsDocumentViewer";
    DocumentViewer.repo = "https://github.com/sitewaerts/cordova-plugin-document-viewer";
    DocumentViewer.platforms = ["Android", "iOS", "Windows"];
    DocumentViewer.decorators = [
        { type: Injectable }
    ];
    return DocumentViewer;
}(IonicNativePlugin));
export { DocumentViewer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RvY3VtZW50LXZpZXdlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUE4RFAsa0NBQWlCOzs7O0lBT25ELHVDQUFjO0lBZ0JkLHdDQUFlLGFBQ2IsR0FBVyxFQUNYLFdBQW1CLEVBQ25CLE9BQThCLEVBQzlCLFVBQXFCLEVBQ3JCLFlBQXVCLEVBQ3ZCLFlBQXVCLEVBQ3ZCLE9BQWtCO0lBZXBCLHFDQUFZLGFBQ1YsR0FBVyxFQUNYLFdBQW1CLEVBQ25CLE9BQThCLEVBQzlCLE1BQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLFlBQXVCLEVBQ3ZCLE9BQWtCOzs7Ozs7O2dCQXJEckIsVUFBVTs7eUJBOURYO0VBK0RvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50Vmlld2VyT3B0aW9ucyB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBkb2N1bWVudFZpZXc/OiB7XG4gICAgY2xvc2VMYWJlbDogc3RyaW5nO1xuICB9O1xuICBuYXZpZ2F0aW9uVmlldz86IHtcbiAgICBjbG9zZUxhYmVsOiBzdHJpbmc7XG4gIH07XG4gIGVtYWlsPzoge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gIH07XG4gIHByaW50Pzoge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gIH07XG4gIG9wZW5XaXRoPzoge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gIH07XG4gIGJvb2ttYXJrcz86IHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICB9O1xuICBzZWFyY2g/OiB7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgfTtcbiAgYXV0b0Nsb3NlPzoge1xuICAgIG9uUGF1c2U6IGJvb2xlYW47XG4gIH07XG59XG5cbi8qKlxuICogQG5hbWUgRG9jdW1lbnQgVmlld2VyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIG9mZmVycyBhIHNsaW0gQVBJIHRvIHZpZXcgUERGIGZpbGVzIHdoaWNoIGFyZSBlaXRoZXIgc3RvcmVkIGluIHRoZSBhcHBzIGFzc2V0cyBmb2xkZXIgKC93d3cvKikgb3IgaW4gYW55IG90aGVyIGZpbGUgc3lzdGVtIGRpcmVjdG9yeSBhdmFpbGFibGUgdmlhIHRoZSBjb3Jkb3ZhIGZpbGUgcGx1Z2luLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRG9jdW1lbnRWaWV3ZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RvY3VtZW50LXZpZXdlci9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudFZpZXdlcikgeyB9XG4gKlxuICogLi4uXG4gKiBjb25zdCBvcHRpb25zOiBEb2N1bWVudFZpZXdlck9wdGlvbnMgPSB7XG4gKiAgIHRpdGxlOiAnTXkgUERGJ1xuICogfVxuICpcbiAqIHRoaXMuZG9jdW1lbnQudmlld0RvY3VtZW50KCdhc3NldHMvbXlGaWxlLnBkZicsICdhcHBsaWNhdGlvbi9wZGYnLCBvcHRpb25zKVxuICpcbiAqIGBgYFxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBEb2N1bWVudFZpZXdlck9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEb2N1bWVudCBWaWV3ZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kb2N1bWVudC12aWV3ZXInLFxuICBwbHVnaW5SZWY6ICdTaXRld2FlcnRzRG9jdW1lbnRWaWV3ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NpdGV3YWVydHMvY29yZG92YS1wbHVnaW4tZG9jdW1lbnQtdmlld2VyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRWaWV3ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgZW1haWwgY29tcG9zZXIgcHJlLWZpbGxlZCB3aXRoIGRhdGEuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJlc29sdmVzIHByb21pc2Ugd2hlbiB0aGUgRW1haWxDb21wb3NlciBoYXMgYmVlbiBvcGVuZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0U3VwcG9ydEluZm8oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGRvY3VtZW50IGNhbiBiZSBzaG93blxuICAgKlxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVybCB0byB0aGUgZmlsZVxuICAgKiBAcGFyYW0gY29udGVudFR5cGUge3N0cmluZ30gQ29udGVudCB0eXBlIG9mIHRoZSBmaWxlXG4gICAqIEBwYXJhbSBvcHRpb25zIHtEb2N1bWVudFZpZXdlck9wdGlvbnN9IG9wdGlvbnNcbiAgICogQHBhcmFtIFtvblBvc3NpYmxlXSB7RnVuY3Rpb259XG4gICAqIEBwYXJhbSBbb25NaXNzaW5nQXBwXSB7RnVuY3Rpb259XG4gICAqIEBwYXJhbSBbb25JbXBvc3NpYmxlXSB7RnVuY3Rpb259XG4gICAqIEBwYXJhbSBbb25FcnJvcl0ge0Z1bmN0aW9ufVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGNhblZpZXdEb2N1bWVudChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBjb250ZW50VHlwZTogc3RyaW5nLFxuICAgIG9wdGlvbnM6IERvY3VtZW50Vmlld2VyT3B0aW9ucyxcbiAgICBvblBvc3NpYmxlPzogRnVuY3Rpb24sXG4gICAgb25NaXNzaW5nQXBwPzogRnVuY3Rpb24sXG4gICAgb25JbXBvc3NpYmxlPzogRnVuY3Rpb24sXG4gICAgb25FcnJvcj86IEZ1bmN0aW9uXG4gICk6IHZvaWQge31cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGZpbGVcbiAgICpcbiAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBVcmwgdG8gdGhlIGZpbGVcbiAgICogQHBhcmFtIGNvbnRlbnRUeXBlIHtzdHJpbmd9IENvbnRlbnQgdHlwZSBvZiB0aGUgZmlsZVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7RG9jdW1lbnRWaWV3ZXJPcHRpb25zfSBvcHRpb25zXG4gICAqIEBwYXJhbSBbb25TaG93XSB7RnVuY3Rpb259XG4gICAqIEBwYXJhbSBbb25DbG9zZV0ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uTWlzc2luZ0FwcF0ge0Z1bmN0aW9ufVxuICAgKiBAcGFyYW0gW29uRXJyb3JdIHtGdW5jdGlvbn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICB2aWV3RG9jdW1lbnQoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgY29udGVudFR5cGU6IHN0cmluZyxcbiAgICBvcHRpb25zOiBEb2N1bWVudFZpZXdlck9wdGlvbnMsXG4gICAgb25TaG93PzogRnVuY3Rpb24sXG4gICAgb25DbG9zZT86IEZ1bmN0aW9uLFxuICAgIG9uTWlzc2luZ0FwcD86IEZ1bmN0aW9uLFxuICAgIG9uRXJyb3I/OiBGdW5jdGlvblxuICApOiB2b2lkIHt9XG59XG4iXX0=